235. Lowest Common Ancestor of a Binary Search Tree

Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p
and q as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6

Example 2:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2

Example 3:
Input: root = [2,1], p = 2, q = 1
Output: 2

Solution:
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root){
            return nullptr;
        }
        if(root == p || root == q){
            return root;
        }
        TreeNode* ltr = lowestCommonAncestor(root->left,p,q);
        TreeNode* rtr = lowestCommonAncestor(root->right,p,q);
        if(ltr && rtr){
            return root;
        }
        return ltr ? ltr : rtr;
    }
};
