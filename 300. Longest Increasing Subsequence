300. Longest Increasing Subsequence

Given an integer array nums, return the length of the longest strictly increasing 
subsequence.

Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

Solution:
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,1);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++){
                if(nums[i] > nums[j] && dp[i] < dp[j]+1)
                {
                    dp[i]=dp[i]+ 1;
                }
            }
        }
        return *max_element(dp.begin(),dp.end());
    }
};


Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Another Solution:

class Solution {
public:
    int lengthOfLIS(vector<int>& nums){
        int n = nums.size();
        vector<int> temp;
        temp.push_back(nums[0]);
        int l = 1;
        for(int i=1;i<n;i++)
        {
            if(temp.back() < nums[i])
            {
                temp.push_back(nums[i]);
                l++;
            }
            else{
                int index = lower_bound(temp.begin(),temp.end(),nums[i])- temp.begin();
                temp[index] = nums[i];
            }
        }
        return l ;
    }
}

