2971. Find Polygon With the Largest Perimeter

You are given an array of positive integers nums of length n.
A polygon is a closed plane figure that has at least 3 sides. The longest side of a polygon is smaller than the sum of its other sides.
Conversely, if you have k (k >= 3) positive real numbers a1, a2, a3, ..., ak where a1 <= a2 <= a3 <= ... <= ak and a1 + a2 + a3 + ... + ak-1 > ak, then there always exists a polygon with k sides whose lengths are a1, a2, a3, ..., ak.
The perimeter of a polygon is the sum of lengths of its sides.
Return the largest possible perimeter of a polygon whose sides can be formed from nums, or -1 if it is not possible to create a polygon.

Example 1:
Input: nums = [5,5,5]
Output: 15

Example 2:
Input: nums = [1,12,1,2,5,50,3]
Output: 12

Example 3:
Input: nums = [5,5,50]
Output: -1

Solution:
class Solution {
public:
    long long largestPerimeter(vector<int>& nums) {
        if(nums.size()<2)
        {
            return -1;
        }
        long long sum = 0;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++)
        {
            sum = sum + nums[i];
        }
        for(int i=nums.size()-1;i>=2;i--)
        {
            if(sum - nums[i]>nums[i])
            {
                return sum;
            }
            sum = sum - nums[i];
        }
        return -1;
    }
};
