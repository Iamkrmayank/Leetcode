110. Balanced Binary Tree

Given a binary tree, determine if it is height-balanced.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

/*Example 3:
Input: root = []
Output: true*/

Solution:
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        // Base case: an empty tree is balanced
        if (root == nullptr) {
            return true;
        }
        // Check the balance of left and right subtrees
        int leftHeight = getHeight(root->left);
        int rightHeight = getHeight(root->right);
        // Check if the current node is balanced
        if (abs(leftHeight - rightHeight) > 1) {
            return false;
        }
        //check balance for left and right subtrees
        return isBalanced(root->left) && isBalanced(root->right);
    }
private:
    // Helper function to calculate the height of a subtree
    int getHeight(TreeNode* node) {
        if (node == nullptr) {
            return 0;
        }
        int leftHeight = getHeight(node->left);
        int rightHeight = getHeight(node->right);
        // Height of the current subtree is the maximum of left and right subtree heights + 1
        return 1 + std::max(leftHeight, rightHeight);
    }
};
