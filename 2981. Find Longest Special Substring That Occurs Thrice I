2981. Find Longest Special Substring That Occurs Thrice I

You are given a string s that consists of lowercase English letters.
A string is called special if it is made up of only a single character. For example, the string "abc" is not special, whereas the strings "ddd", "zz", and "f" are special.
Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.
A substring is a contiguous non-empty sequence of characters within a string.

Example 1:

Input: s = "aaaa"
Output: 2
Explanation: The longest special substring which occurs thrice is "aa": substrings "aaaa", "aaaa", and "aaaa".
It can be shown that the maximum length achievable is 2.

Example 2:

Input: s = "abcdef"
Output: -1
Explanation: There exists no special substring which occurs at least thrice. Hence return -1.

Solution:
class Solution {
public:
    
    unordered_map<string, int> mp;
    
    int maximumLength(string s) {
        
        int n = s.size();
        
        for(int i = 0; i < n; ++i)
        {
            string curr;
            set<char> st;
            for(int j = i; j < n; ++j)
            {
                curr += s[j];
                
                st.insert(s[j]);
                
                if(st.size() == 1)
                    ++mp[curr];
            }
        }
        
        int ans = -1;
        
        for(auto& itr : mp)
        {
            if(itr.second >= 3)
            {
                ans = max(ans, (int)itr.first.size());
            }
        }
        return ans;
    }
};
