236. Lowest Common Ancestor of a Binary Tree

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in
T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5

Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

Solution:
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        // Checking whether the root is null or not 
        if(root==NULL){
            return NULL;
        }
        // If any of the root is equivalent to p or q then it return root
        if(root == p || root == q){
            return root;
        }
        // Traversing each side 
        TreeNode* ltr = lowestCommonAncestor(root->left,p,q);
        TreeNode* rtr = lowestCommonAncestor(root->right,p,q);
        if(ltr && rtr){
            return root;
        }
        return ltr ? ltr : rtr;
    }
};
