1335. Minimum Difficulty of a Job Schedule

You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).
You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. 
The difficulty of a day is the maximum difficulty of a job done on that day.
You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].
Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.

Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
Second day you can finish the last job, total difficulty = 1.
The difficulty of the schedule = 6 + 1 = 7 
Example 2:

Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.
Example 3:

Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: The schedule is one job per day. total difficulty will be 3.

Solution:

class Solution {
public:
    int minDifficulty(vector<int>& jobDifficulty, int days) {
        int length = jobDifficulty.size();
        if (days > length) return -1;
        vector<vector<int>> minDifficulties(days, vector<int>(length));
        for (int i = 1; i < days; ++i) {
            fill(minDifficulties[i].begin(), minDifficulties[i].end(), INT_MAX);
        }
        
        int maxDiff = 0; 
        int i = 0;
        while (i <= length - days) {
            maxDiff = max(maxDiff, jobDifficulty[i]);
            minDifficulties[0][i] = maxDiff;
            ++i;
        }
        
        int currentDay = 1;
        while (currentDay < days) {
            int to = currentDay;
            while (to <= length - days + currentDay) {
                int currentJobDifficulty = jobDifficulty[to];
                int result = INT_MAX;
                int j = to - 1;
                while (j >= currentDay - 1) {
                    result = min(result, minDifficulties[currentDay - 1][j] + currentJobDifficulty);
                    currentJobDifficulty = max(currentJobDifficulty, jobDifficulty[j]);
                    --j;
                }
                minDifficulties[currentDay][to] = result;
                ++to;
            }
            ++currentDay;
        }       
        return minDifficulties[days - 1][length - 1];
    }
};

